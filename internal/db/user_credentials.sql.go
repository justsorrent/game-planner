// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: user_credentials.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, password_hash, email, created_at, updated_at FROM user_credentials WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (UserCredential, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i UserCredential
	err := row.Scan(
		&i.ID,
		&i.PasswordHash,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const registerUser = `-- name: RegisterUser :one
INSERT INTO user_credentials (id, password_hash, email)
VALUES ($1, $2, $3)
RETURNING id, password_hash, email, created_at, updated_at
`

type RegisterUserParams struct {
	ID           uuid.UUID
	PasswordHash string
	Email        string
}

func (q *Queries) RegisterUser(ctx context.Context, arg RegisterUserParams) (UserCredential, error) {
	row := q.db.QueryRowContext(ctx, registerUser, arg.ID, arg.PasswordHash, arg.Email)
	var i UserCredential
	err := row.Scan(
		&i.ID,
		&i.PasswordHash,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
