// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: games.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createGame = `-- name: CreateGame :one
insert into games (id, name, description, url, starting_at, ending_at)
values ($1, $2, $3, $4, $5, $6)
returning id, name, description, url, starting_at, ending_at, created_at, updated_at
`

type CreateGameParams struct {
	ID          uuid.UUID
	Name        string
	Description sql.NullString
	Url         sql.NullString
	StartingAt  sql.NullTime
	EndingAt    sql.NullTime
}

func (q *Queries) CreateGame(ctx context.Context, arg CreateGameParams) (Game, error) {
	row := q.db.QueryRowContext(ctx, createGame,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Url,
		arg.StartingAt,
		arg.EndingAt,
	)
	var i Game
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Url,
		&i.StartingAt,
		&i.EndingAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteGame = `-- name: DeleteGame :exec
delete from games where id = $1
`

func (q *Queries) DeleteGame(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteGame, id)
	return err
}

const getGameById = `-- name: GetGameById :one
select id, name, description, url, starting_at, ending_at, created_at, updated_at from games where id = $1
`

func (q *Queries) GetGameById(ctx context.Context, id uuid.UUID) (Game, error) {
	row := q.db.QueryRowContext(ctx, getGameById, id)
	var i Game
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Url,
		&i.StartingAt,
		&i.EndingAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getGameByStartingDate = `-- name: GetGameByStartingDate :many
select id, name, description, url, starting_at, ending_at, created_at, updated_at from games where date(starting_at) = $1
`

func (q *Queries) GetGameByStartingDate(ctx context.Context, startingAt sql.NullTime) ([]Game, error) {
	rows, err := q.db.QueryContext(ctx, getGameByStartingDate, startingAt)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Game
	for rows.Next() {
		var i Game
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Url,
			&i.StartingAt,
			&i.EndingAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGames = `-- name: GetGames :many
select id, name, description, url, starting_at, ending_at, created_at, updated_at from games
`

func (q *Queries) GetGames(ctx context.Context) ([]Game, error) {
	rows, err := q.db.QueryContext(ctx, getGames)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Game
	for rows.Next() {
		var i Game
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Url,
			&i.StartingAt,
			&i.EndingAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGamesOrderByStartingDate = `-- name: GetGamesOrderByStartingDate :many
select id, name, description, url, starting_at, ending_at, created_at, updated_at from games order by starting_at desc
`

func (q *Queries) GetGamesOrderByStartingDate(ctx context.Context) ([]Game, error) {
	rows, err := q.db.QueryContext(ctx, getGamesOrderByStartingDate)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Game
	for rows.Next() {
		var i Game
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Url,
			&i.StartingAt,
			&i.EndingAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateGame = `-- name: UpdateGame :exec
update games
set name = $2,
    description = $3,
    url = $4,
    starting_at = $5,
    ending_at = $6,
    updated_at = now()
where id = $1
`

type UpdateGameParams struct {
	ID          uuid.UUID
	Name        string
	Description sql.NullString
	Url         sql.NullString
	StartingAt  sql.NullTime
	EndingAt    sql.NullTime
}

func (q *Queries) UpdateGame(ctx context.Context, arg UpdateGameParams) error {
	_, err := q.db.ExecContext(ctx, updateGame,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Url,
		arg.StartingAt,
		arg.EndingAt,
	)
	return err
}
